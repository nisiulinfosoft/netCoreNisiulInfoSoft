
--=====================================================================================
--CREAR BASE DE DATOS
--=====================================================================================

CREATE DATABASE NISIULINFOSOFT

--=====================================================================================
--SELECCIONAR BASE DE DATOS
--=====================================================================================

USE NISIULINFOSOFT

--=====================================================================================
--ELIMINAR TABLAS
--=====================================================================================

DROP TABLE NIS_EMPRESA
DROP TABLE NIS_AREA
DROP TABLE NIS_CARGO
DROP TABLE NIS_PERSONAL

--=====================================================================================
--CREAR TABLAS
--=====================================================================================

CREATE TABLE NIS_EMPRESA
(
ID_EMP INT NOT NULL IDENTITY(1,1),
RUC VARCHAR(15) NOT NULL,
RAZON_SOCIAL VARCHAR(100) NOT NULL,
FECHA_REGISTRO DATETIME NOT NULL DEFAULT GETDATE(),
FECHA_INICIO DATETIME NOT NULL,
DIRECCION VARCHAR(100) NOT NULL,
TELEFONO VARCHAR(15),
CORREO VARCHAR(50),
PAGINA_WEB VARCHAR(50),
PAIS VARCHAR(100),
DEPARTAMENTO VARCHAR(100),
DISTRITO VARCHAR(100),
OBSERVACION VARCHAR(200),
ESTADO BIT NOT NULL DEFAULT (1),
CONSTRAINT PK_NIS_EMPRESA_ID_EMP PRIMARY KEY(ID_EMP),
CONSTRAINT UQ_NIS_EMPRESA_RUC UNIQUE(RUC),
CONSTRAINT UQ_NIS_EMPRESA_RAZON_SOCIAL UNIQUE(RAZON_SOCIAL)
)

GO

--DBCC CHECKIDENT (NIS_AREA, RESEED, 10)

CREATE TABLE NIS_AREA
(
ID_ARE INT NOT NULL IDENTITY(1,1),
DESCRIPCION VARCHAR(100) NOT NULL,
OBSERVACION VARCHAR(200),
ESTADO BIT NOT NULL DEFAULT (1),
CONSTRAINT PK_NIS_AREA_ID_ARE PRIMARY KEY(ID_ARE),
CONSTRAINT UQ_NIS_AREA_DESCRIPCION UNIQUE(DESCRIPCION)
)

GO

CREATE TABLE NIS_CARGO
(
ID_CAR INT NOT NULL IDENTITY(1,1),
DESCRIPCION VARCHAR(100) NOT NULL,
OBSERVACION VARCHAR(200),
ESTADO BIT NOT NULL DEFAULT (1),
CONSTRAINT PK_NIS_CARGO_ID_CAR PRIMARY KEY(ID_CAR),
CONSTRAINT UQ_NIS_CARGO_DESCRIPCION UNIQUE(DESCRIPCION)
)

GO

CREATE TABLE NIS_PERSONAL
(
ID_PER INT NOT NULL IDENTITY(1,1),
ID_EMP INT NOT NULL,
ID_ARE INT NOT NULL,
ID_CAR INT NOT NULL,
DNI VARCHAR(15) NOT NULL,
NOMBRE VARCHAR(50) NOT NULL,
APELLIDO_PATERNO VARCHAR(50) NOT NULL,
APELLIDO_MATERNO VARCHAR(50) NOT NULL,
SEXO VARCHAR(1) NOT NULL,
FECHA_REGISTRO DATETIME NOT NULL DEFAULT GETDATE(),
FECHA_NACIMIENTO DATETIME,
FECHA_CONTACTO DATETIME,
TELEFONO VARCHAR(15),
CELULAR VARCHAR(15),
CORREO VARCHAR(50),
DIRECCION VARCHAR(100),
OBSERVACION VARCHAR(200),
ESTADO BIT NOT NULL DEFAULT (1),
CONSTRAINT PK_NIS_PERSONAL_ID_PER PRIMARY KEY(ID_PER),
CONSTRAINT FK_NIS_PERSONAL_NIS_EMPRESA_ID_EMP FOREIGN KEY(ID_EMP) REFERENCES NIS_EMPRESA(ID_EMP),
CONSTRAINT FK_NIS_PERSONAL_NIS_AREA_ID_ARE FOREIGN KEY(ID_ARE) REFERENCES NIS_AREA(ID_ARE),
CONSTRAINT FK_NIS_PERSONAL_NIS_CARGO_ID_CAR FOREIGN KEY(ID_CAR) REFERENCES NIS_CARGO(ID_CAR),
CONSTRAINT UQ_NIS_PERSONAL_DNI UNIQUE(DNI)
)

GO

CREATE TABLE NIS_TIPO_USUARIO
(
ID_TIP INT NOT NULL IDENTITY(1,1),
DESCRIPCION VARCHAR(100) NOT NULL,
OBSERVACION VARCHAR(200),
ESTADO BIT NOT NULL DEFAULT (1),
CONSTRAINT PK_NIS_TIPO_USUARIO_ID_TIP PRIMARY KEY(ID_TIP),
CONSTRAINT UQ_NIS_TIPO_USUARIO_DESCRIPCION UNIQUE(DESCRIPCION)
)

GO

CREATE TABLE NIS_USUARIO
(
ID_USU INT NOT NULL IDENTITY(1,1),
ID_TIP INT NOT NULL,
ID_PER INT NOT NULL,
USUARIO VARCHAR(50) NOT NULL,
CONTRASENIA VARCHAR(50),
ESTADO BIT NOT NULL DEFAULT (1),
CONSTRAINT PK_NIS_USUARIO_ID_USU PRIMARY KEY(ID_USU),
CONSTRAINT FK_NIS_USUARIO_NIS_TIPO_USUARIO_ID_TIP FOREIGN KEY(ID_TIP) REFERENCES NIS_TIPO_USUARIO(ID_TIP),
CONSTRAINT FK_NIS_USUARIO_NIS_PERSONAL_ID_PER FOREIGN KEY(ID_PER) REFERENCES NIS_PERSONAL(ID_PER),
CONSTRAINT UQ_NIS_USUARIO_USUARIO UNIQUE(USUARIO)
)

GO

--=====================================================================================
--CONSULTAR TABLAS
--=====================================================================================

SELECT * FROM NIS_EMPRESA
SELECT * FROM NIS_AREA
SELECT * FROM NIS_CARGO
SELECT * FROM NIS_PERSONAL
SELECT * FROM NIS_TIPO_USUARIO
SELECT * FROM NIS_USUARIO

SP_HELP NIS_CARGO --ESTRUCTURA DE TABLA

--=====================================================================================
--INSERTAR DATOS
--=====================================================================================

INSERT INTO NIS_EMPRESA(RUC,RAZON_SOCIAL,FECHA_INICIO,DIRECCION,TELEFONO,CORREO,PAGINA_WEB,PAIS,DEPARTAMENTO,DISTRITO,OBSERVACION)
VALUES('12345678912','NISIULINFOSOFT SAC','20190412','LIMA-CALLAO','','nisiulinfosoft@gmail.com','','PERÚ','LIMA','CALLAO','')

INSERT INTO NIS_AREA(DESCRIPCION,OBSERVACION)
VALUES('SISTEMAS',''),
('MANTENIMIENTO',''),
('SISTEMAS INTEGRADOS DE GESTION',''),
('CONTABILIDAD Y FINANZAS',''),
('TESORERIA',''),
('COMERCIAL',''),
('VENTAS',''),
('PRODUCCION',''),
('GESTION HUMANA',''),
('GERENCIA GENERAL','')

INSERT INTO NIS_CARGO(DESCRIPCION,OBSERVACION)
VALUES('GERENTE DE SISTEMAS Y PROYECTOS',''),
('JEFE DE SISTEMAS',''),
('COORDINAR DE PROYECTOS',''),
('ANALISTA DE SISTEMAS',''),
('PROGRAMADOR DE SISTEMAS',''),
('AUXILIAR DE SISTEMAS',''),
('PRACTICANTE DE SISTEMAS',''),
('JEFE DE MANTENIMIENTO',''),
('JEFE SIG',''),
('JEFE DE CONTABILIDAD','')

INSERT INTO NIS_PERSONAL(ID_EMP,ID_ARE,ID_CAR,DNI,NOMBRE,APELLIDO_PATERNO,APELLIDO_MATERNO,SEXO,FECHA_NACIMIENTO,FECHA_CONTACTO,TELEFONO,CELULAR,CORREO,DIRECCION,OBSERVACION)
VALUES(1,1,1,'12345678','Luisin','Maza','Alcalde','M','19890812','20190412','','','luis_12_835@hotmail.com','Perú-Lima-Callao','')

INSERT INTO NIS_TIPO_USUARIO(DESCRIPCION,OBSERVACION)
VALUES('ADMINISTRADOR',''),
('USUARIO','')

INSERT INTO NIS_USUARIO(ID_TIP,ID_PER,USUARIO,CONTRASENIA)
VALUES(1,1,'lmaza','123456')

--=====================================================================================
--PROCEDIMIENTOS ALMACENADOS
--=====================================================================================

GO

EXEC NISUSP_EMPRESA_LIST

CREATE PROCEDURE NISUSP_EMPRESA_LIST
AS
BEGIN
	SELECT 
	ID_EMP,
	RUC,
	RAZON_SOCIAL,
	CONVERT(VARCHAR(10),FECHA_REGISTRO,103) + ' ' + CONVERT(VARCHAR(5),FECHA_REGISTRO,108) AS FECHA_REGISTRO,
	CONVERT(VARCHAR(10),FECHA_INICIO,103) AS FECHA_INICIO,
	DIRECCION,
	TELEFONO,
	CORREO,
	PAGINA_WEB,
	PAIS,
	DEPARTAMENTO,
	DISTRITO,
	OBSERVACION,
	CASE WHEN ESTADO=1 THEN 'Si' ELSE 'No' END AS ACTIVO
	FROM NIS_EMPRESA
	ORDER BY RAZON_SOCIAL ASC
END

GO

EXEC NISUSP_EMPRESA_GET_RUC '12345678912'

CREATE PROCEDURE NISUSP_EMPRESA_GET_RUC
@RUC VARCHAR(15)
AS
BEGIN
	
	SELECT 
	ID_EMP,
	RUC,
	RAZON_SOCIAL,
	CONVERT(VARCHAR(10),FECHA_REGISTRO,103) + ' ' + CONVERT(VARCHAR(5),FECHA_REGISTRO,108) AS FECHA_REGISTRO,
	CONVERT(VARCHAR(10),FECHA_INICIO,103) AS FECHA_INICIO,
	DIRECCION,
	TELEFONO,
	CORREO,
	PAGINA_WEB,
	PAIS,
	DEPARTAMENTO,
	DISTRITO,
	OBSERVACION,
	CASE WHEN ESTADO=1 THEN 'Si' ELSE 'No' END AS ACTIVO
	FROM NIS_EMPRESA
	WHERE RUC=@RUC

END

GO

CREATE PROCEDURE NISUSP_EMPRESA_INSERT
@RUC VARCHAR(15),
@RAZON_SOCIAL VARCHAR(100),
@FECHA_INICIO DATETIME,
@DIRECCION VARCHAR(100),
@TELEFONO VARCHAR(15),
@CORREO VARCHAR(50),
@PAGINA_WEB VARCHAR(50),
@PAIS VARCHAR(100),
@DEPARTAMENTO VARCHAR(100),
@DISTRITO VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF NOT EXISTS (SELECT RUC FROM NIS_EMPRESA WHERE RUC=@RUC)
			BEGIN
			
				IF NOT EXISTS (SELECT RAZON_SOCIAL FROM NIS_EMPRESA WHERE RTRIM(RAZON_SOCIAL)=RTRIM(@RAZON_SOCIAL))
				BEGIN
					
					INSERT INTO NIS_EMPRESA(RUC,RAZON_SOCIAL,FECHA_INICIO,DIRECCION,TELEFONO,CORREO,PAGINA_WEB,PAIS,DEPARTAMENTO,DISTRITO,OBSERVACION,ESTADO)
					VALUES(@RUC,@RAZON_SOCIAL,@FECHA_INICIO,@DIRECCION,@TELEFONO,@CORREO,@PAGINA_WEB,@PAIS,@DEPARTAMENTO,@DISTRITO,@OBSERVACION,@ESTADO)
						
				END
				ELSE
				BEGIN
					SET @MSG = 'Razon social ya existe'
				END
			
			END
			ELSE
			BEGIN
				SET @MSG = 'RUC ya existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH
	
END

GO

CREATE PROCEDURE NISUSP_EMPRESA_UPDATE
@RUC VARCHAR(15),
@RAZON_SOCIAL VARCHAR(100),
@FECHA_INICIO DATETIME,
@DIRECCION VARCHAR(100),
@TELEFONO VARCHAR(15),
@CORREO VARCHAR(50),
@PAGINA_WEB VARCHAR(50),
@PAIS VARCHAR(100),
@DEPARTAMENTO VARCHAR(100),
@DISTRITO VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF EXISTS (SELECT RUC FROM NIS_EMPRESA WHERE RUC=@RUC)
			BEGIN

				IF EXISTS (SELECT RAZON_SOCIAL FROM NIS_EMPRESA WHERE RTRIM(RAZON_SOCIAL)=RTRIM(@RAZON_SOCIAL))
				BEGIN
				
					UPDATE NIS_EMPRESA SET FECHA_INICIO=@FECHA_INICIO,DIRECCION=@DIRECCION,
					TELEFONO=@TELEFONO,CORREO=@CORREO,PAGINA_WEB=@PAGINA_WEB,PAIS=@PAIS,DEPARTAMENTO=@DEPARTAMENTO,DISTRITO=@DISTRITO,
					OBSERVACION=@OBSERVACION,ESTADO=@ESTADO
					WHERE RUC=@RUC
					
				END
				ELSE
				BEGIN
				
					UPDATE NIS_EMPRESA SET RAZON_SOCIAL=@RAZON_SOCIAL,FECHA_INICIO=@FECHA_INICIO,DIRECCION=@DIRECCION,
					TELEFONO=@TELEFONO,CORREO=@CORREO,PAGINA_WEB=@PAGINA_WEB,PAIS=@PAIS,DEPARTAMENTO=@DEPARTAMENTO,DISTRITO=@DISTRITO,
					OBSERVACION=@OBSERVACION,ESTADO=@ESTADO
					WHERE RUC=@RUC
					
				END
			END
			ELSE
			BEGIN
				SET @MSG = 'RUC no existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH

END

GO

CREATE PROCEDURE NISUSP_EMPRESA_DELETE
@RUC VARCHAR(15)
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
				
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF EXISTS (SELECT RUC FROM NIS_EMPRESA WHERE RUC=@RUC)
			BEGIN
			
				DELETE FROM NIS_EMPRESA WHERE RUC=@RUC
				
			END
			ELSE
			BEGIN
				SET @MSG = 'RUC no existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH
	
END

GO

EXEC NISUSP_AREA_LIST

CREATE PROCEDURE NISUSP_AREA_LIST
AS
BEGIN
	SELECT 
	ID_ARE,
	DESCRIPCION,
	OBSERVACION,
	ESTADO
	--CASE WHEN ESTADO=1 THEN 'Si' ELSE 'No' END AS ACTIVO
	FROM NIS_AREA
	ORDER BY DESCRIPCION ASC
END

GO

CREATE PROCEDURE NISUSP_AREA_SEARCH_DESCRIPCION
@DESCRIPCION VARCHAR(100)
AS
BEGIN
	SELECT 
	ID_ARE,
	DESCRIPCION,
	OBSERVACION,
	ESTADO
	--CASE WHEN ESTADO=1 THEN 'Si' ELSE 'No' END AS ACTIVO
	FROM NIS_AREA
	WHERE DESCRIPCION LIKE '%' + LTRIM(RTRIM(@DESCRIPCION)) + '%'
	ORDER BY DESCRIPCION ASC
END

GO

CREATE PROCEDURE NISUSP_AREA_INSERT
@DESCRIPCION VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF NOT EXISTS (SELECT * FROM NIS_AREA WHERE DESCRIPCION=@DESCRIPCION)
			BEGIN
			
				INSERT INTO NIS_AREA(DESCRIPCION,OBSERVACION,ESTADO)
				VALUES(@DESCRIPCION,@OBSERVACION,@ESTADO)
			
			END
			ELSE
			BEGIN
				SET @MSG = 'Descripción ya existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH
	
END

GO

CREATE PROCEDURE NISUSP_AREA_INSERT_OUTPUT
@DESCRIPCION VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT,
@RESPUESTA VARCHAR(200) OUTPUT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF NOT EXISTS (SELECT * FROM NIS_AREA WHERE DESCRIPCION=@DESCRIPCION)
			BEGIN
			
				INSERT INTO NIS_AREA(DESCRIPCION,OBSERVACION,ESTADO)
				VALUES(@DESCRIPCION,@OBSERVACION,@ESTADO)
			
			END
			ELSE
			BEGIN
				SET @MSG = 'Descripción ya existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SET @RESPUESTA = @MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SET @RESPUESTA = 'Error DB: ' + ERROR_MESSAGE()
	
	END CATCH
	
END

GO

CREATE PROCEDURE NISUSP_AREA_UPDATE
@ID_ARE INT,
@DESCRIPCION VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF EXISTS (SELECT * FROM NIS_AREA WHERE ID_ARE=@ID_ARE)
			BEGIN

				IF EXISTS (SELECT DESCRIPCION FROM NIS_AREA WHERE RTRIM(DESCRIPCION)=RTRIM(@DESCRIPCION))
				BEGIN
				
					UPDATE NIS_AREA SET OBSERVACION=@DESCRIPCION,ESTADO=@ESTADO
					WHERE ID_ARE=@ID_ARE
					
				END
				ELSE
				BEGIN
				
					UPDATE NIS_AREA SET DESCRIPCION=@DESCRIPCION,OBSERVACION=@DESCRIPCION,ESTADO=@ESTADO
					WHERE ID_ARE=@ID_ARE
					
				END

			END
			ELSE
			BEGIN
				SET @MSG = 'Código no existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH

END

GO

CREATE PROCEDURE NISUSP_AREA_DELETE
@ID_ARE INT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
				
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF EXISTS (SELECT * FROM NIS_AREA WHERE ID_ARE=@ID_ARE)
			BEGIN
			
				DELETE FROM NIS_AREA WHERE ID_ARE=@ID_ARE
				
			END
			ELSE
			BEGIN
				SET @MSG = 'Código no existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH
	
END

GO

EXEC NISUSP_CARGO_LIST

CREATE PROCEDURE NISUSP_CARGO_LIST
AS
BEGIN
	SELECT 
	ID_CAR,
	DESCRIPCION,
	OBSERVACION,
	CASE WHEN ESTADO=1 THEN 'Si' ELSE 'No' END AS ACTIVO
	FROM NIS_CARGO
	ORDER BY DESCRIPCION ASC
END

GO

EXEC NISUSP_CARGO_LIST_2

CREATE PROCEDURE NISUSP_CARGO_LIST_2
AS
BEGIN
	SELECT 
	ID_CAR,
	DESCRIPCION,
	OBSERVACION,
	ESTADO
	FROM NIS_CARGO
	ORDER BY DESCRIPCION ASC
END

GO

CREATE PROCEDURE NISUSP_CARGO_SEARCH_DESCRIPCION
@DESCRIPCION VARCHAR(100)
AS
BEGIN
	SELECT 
	ID_CAR,
	DESCRIPCION,
	OBSERVACION,
	CASE WHEN ESTADO=1 THEN 'Si' ELSE 'No' END AS ACTIVO
	FROM NIS_CARGO
	WHERE DESCRIPCION LIKE '%' + @DESCRIPCION + '%'
	ORDER BY DESCRIPCION ASC
END

GO

CREATE PROCEDURE NISUSP_CARGO_SEARCH_DESCRIPCION_2
@DESCRIPCION VARCHAR(100)
AS
BEGIN
	SELECT 
	ID_CAR,
	DESCRIPCION,
	OBSERVACION,
	ESTADO
	FROM NIS_CARGO
	WHERE DESCRIPCION LIKE '%' + @DESCRIPCION + '%'
	ORDER BY DESCRIPCION ASC
END

GO

CREATE PROCEDURE NISUSP_CARGO_INSERT
@DESCRIPCION VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF NOT EXISTS (SELECT * FROM NIS_CARGO WHERE DESCRIPCION=@DESCRIPCION)
			BEGIN
			
				INSERT INTO NIS_CARGO(DESCRIPCION,OBSERVACION,ESTADO)
				VALUES(@DESCRIPCION,@OBSERVACION,@ESTADO)
			
			END
			ELSE
			BEGIN
				SET @MSG = 'Descripción ya existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH
	
END

GO

CREATE PROCEDURE NISUSP_CARGO_INSERT_OUTPUT
@DESCRIPCION VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT,
@RESPUESTA VARCHAR(200) OUTPUT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF NOT EXISTS (SELECT * FROM NIS_CARGO WHERE DESCRIPCION=@DESCRIPCION)
			BEGIN
			
				INSERT INTO NIS_CARGO(DESCRIPCION,OBSERVACION,ESTADO)
				VALUES(@DESCRIPCION,@OBSERVACION,@ESTADO)
			
			END
			ELSE
			BEGIN
				SET @MSG = 'Descripción ya existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SET @RESPUESTA = @MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SET @RESPUESTA = 'Error DB: ' + ERROR_MESSAGE()
	
	END CATCH
	
END

GO

CREATE PROCEDURE NISUSP_CARGO_UPDATE
@ID_CAR INT,
@DESCRIPCION VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF EXISTS (SELECT * FROM NIS_CARGO WHERE ID_CAR=@ID_CAR)
			BEGIN

				IF EXISTS (SELECT DESCRIPCION FROM NIS_CARGO WHERE RTRIM(DESCRIPCION)=RTRIM(@DESCRIPCION))
				BEGIN
				
					UPDATE NIS_CARGO SET OBSERVACION=@DESCRIPCION,ESTADO=@ESTADO
					WHERE ID_CAR=@ID_CAR
					
				END
				ELSE
				BEGIN
				
					UPDATE NIS_CARGO SET DESCRIPCION=@DESCRIPCION,OBSERVACION=@DESCRIPCION,ESTADO=@ESTADO
					WHERE ID_CAR=@ID_CAR
					
				END

			END
			ELSE
			BEGIN
				SET @MSG = 'Código no existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH

END

GO

CREATE PROCEDURE NISUSP_CARGO_DELETE
@ID_CAR INT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
				
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF EXISTS (SELECT * FROM NIS_CARGO WHERE ID_CAR=@ID_CAR)
			BEGIN
			
				DELETE FROM NIS_CARGO WHERE ID_CAR=@ID_CAR
				
			END
			ELSE
			BEGIN
				SET @MSG = 'Código no existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH
	
END

GO

EXEC NISUSP_PERSONAL_LIST

CREATE PROCEDURE NISUSP_PERSONAL_LIST
AS
BEGIN
	SELECT 
	ID_PER,
	ID_EMP,
	ID_ARE,
	ID_CAR,
	DNI,
	NOMBRE,
	APELLIDO_PATERNO,
	APELLIDO_MATERNO,
	CASE WHEN SEXO='M' THEN 'Masculino' ELSE 'Femenino' END AS SEXO,
	CONVERT(VARCHAR(10),FECHA_REGISTRO,103) + ' ' + CONVERT(VARCHAR(5),FECHA_REGISTRO,108) AS FECHA_REGISTRO,
	CONVERT(VARCHAR(10),FECHA_NACIMIENTO,103) AS FECHA_NACIMIENTO,
	CONVERT(VARCHAR(10),FECHA_CONTACTO,103) AS FECHA_CONTACTO,
	TELEFONO,
	CELULAR,
	CORREO,
	DIRECCION,
	OBSERVACION,
	CASE WHEN ESTADO=1 THEN 'Si' ELSE 'No' END AS ACTIVO
	FROM NIS_PERSONAL
	ORDER BY NOMBRE + ' ' + APELLIDO_PATERNO + ' ' + APELLIDO_MATERNO ASC
END

GO

EXEC NISUSP_PERSONAL_GET_DNI '12345678'

CREATE PROCEDURE NISUSP_PERSONAL_GET_DNI
@DNI VARCHAR(15)
AS
BEGIN
	SELECT 
	ID_PER,
	ID_EMP,
	ID_ARE,
	ID_CAR,
	DNI,
	NOMBRE,
	APELLIDO_PATERNO,
	APELLIDO_MATERNO,
	CASE WHEN SEXO='M' THEN 'Masculino' ELSE 'Femenino' END AS SEXO,
	CONVERT(VARCHAR(10),FECHA_REGISTRO,103) + ' ' + CONVERT(VARCHAR(5),FECHA_REGISTRO,108) AS FECHA_REGISTRO,
	CONVERT(VARCHAR(10),FECHA_NACIMIENTO,103) AS FECHA_NACIMIENTO,
	CONVERT(VARCHAR(10),FECHA_CONTACTO,103) AS FECHA_CONTACTO,
	TELEFONO,
	CELULAR,
	CORREO,
	DIRECCION,
	OBSERVACION,
	CASE WHEN ESTADO=1 THEN 'Si' ELSE 'No' END AS ACTIVO
	FROM NIS_PERSONAL
	WHERE DNI=@DNI
END

GO

CREATE PROCEDURE NISUSP_PERSONAL_INSERT
@ID_EMP INT,
@ID_ARE INT,
@ID_CAR INT,
@DNI VARCHAR(15),
@NOMBRE VARCHAR(50),
@APELLIDO_PATERNO VARCHAR(50),
@APELLIDO_MATERNO VARCHAR(50),
@SEXO VARCHAR(1),
@FECHA_NACIMIENTO DATETIME,
@FECHA_CONTACTO DATETIME,
@TELEFONO VARCHAR(15),
@CELULAR VARCHAR(15),
@CORREO VARCHAR(50),
@DIRECCION VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF NOT EXISTS (SELECT DNI FROM NIS_PERSONAL WHERE DNI=@DNI)
			BEGIN
			
				INSERT INTO NIS_PERSONAL(ID_EMP,ID_ARE,ID_CAR,DNI,NOMBRE,APELLIDO_PATERNO,APELLIDO_MATERNO,SEXO,FECHA_NACIMIENTO,FECHA_CONTACTO,TELEFONO,CELULAR,CORREO,DIRECCION,OBSERVACION,ESTADO)
				VALUES(@ID_EMP,@ID_ARE,@ID_CAR,@DNI,@NOMBRE,@APELLIDO_PATERNO,@APELLIDO_MATERNO,@SEXO,@FECHA_NACIMIENTO,@FECHA_CONTACTO,@TELEFONO,@CELULAR,@CORREO,@DIRECCION,@OBSERVACION,@ESTADO)
			
			END
			ELSE
			BEGIN
				SET @MSG = 'DNI ya existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH
	
END

GO

CREATE PROCEDURE NISUSP_PERSONAL_UPDATE
@ID_EMP INT,
@ID_ARE INT,
@ID_CAR INT,
@DNI VARCHAR(15),
@NOMBRE VARCHAR(50),
@APELLIDO_PATERNO VARCHAR(50),
@APELLIDO_MATERNO VARCHAR(50),
@SEXO VARCHAR(1),
@FECHA_NACIMIENTO DATETIME,
@FECHA_CONTACTO DATETIME,
@TELEFONO VARCHAR(15),
@CELULAR VARCHAR(15),
@CORREO VARCHAR(50),
@DIRECCION VARCHAR(100),
@OBSERVACION VARCHAR(200),
@ESTADO BIT
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
		
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF EXISTS (SELECT DNI FROM NIS_PERSONAL WHERE DNI=@DNI)
			BEGIN

				UPDATE NIS_PERSONAL SET ID_EMP=@ID_EMP,ID_ARE=@ID_ARE,ID_CAR=@ID_CAR,DNI=@DNI,
				NOMBRE=@NOMBRE,APELLIDO_PATERNO=@APELLIDO_PATERNO,APELLIDO_MATERNO=@APELLIDO_MATERNO,SEXO=@SEXO,
				FECHA_NACIMIENTO=@FECHA_NACIMIENTO,FECHA_CONTACTO=@FECHA_CONTACTO,
				TELEFONO=@TELEFONO,CELULAR=@CELULAR,CORREO=@CORREO,DIRECCION=@DIRECCION,OBSERVACION=@OBSERVACION,ESTADO=@ESTADO
				WHERE DNI=@DNI

			END
			ELSE
			BEGIN
				SET @MSG = 'DNI no existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH

END

GO

CREATE PROCEDURE NISUSP_PERSONAL_DELETE
@DNI VARCHAR(15)
AS
BEGIN

	--INICIAR CONTROL DE ERRORES
	BEGIN TRY
	
		--INICIAR TRANSACCION
		BEGIN TRANSACTION
				
			DECLARE @MSG VARCHAR(MAX)
			
			SET @MSG = ''
			
			IF EXISTS (SELECT DNI FROM NIS_PERSONAL WHERE DNI=@DNI)
			BEGIN
			
				DELETE FROM NIS_PERSONAL WHERE DNI=@DNI
				
			END
			ELSE
			BEGIN
				SET @MSG = 'DNI no existe'
			END
		
		--FINALIZAR TRANASACCION CON EXITO
		COMMIT TRANSACTION
		
		SELECT @MSG AS MSG
	
	END TRY
	BEGIN CATCH
	
		IF @@TRANCOUNT > 0
		BEGIN
			--FINALIZAR TRANSACCION Y VUELVO TODO A SU ESTADO INICIAL DEBIDO A ERRORES
			ROLLBACK TRANSACTION
		END
		
		--MENSAJE QUE MUESTRA ERROR
		SELECT 'Error DB: ' + ERROR_MESSAGE() AS MSG
	
	END CATCH
	
END

GO